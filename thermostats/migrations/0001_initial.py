# Generated by Django 4.2.7 on 2025-08-08 20:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('vacation', 'Vacation Rental')], max_length=20)),
                ('size', models.IntegerField(help_text='Size in square feet')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('street', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
                ('country', models.CharField(default='USA', max_length=100)),
                ('timezone', models.CharField(default='America/Chicago', help_text='Timezone of the property, e.g. America/Chicago', max_length=50)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Properties',
            },
        ),
        migrations.CreateModel(
            name='Thermostat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('brand', models.CharField(choices=[('nest', 'Google Nest'), ('cielo', 'Cielo'), ('pioneer', 'Pioneer'), ('other', 'Other')], max_length=20)),
                ('model', models.CharField(max_length=100)),
                ('device_id', models.CharField(max_length=255, unique=True)),
                ('current_temperature', models.FloatField(blank=True, null=True)),
                ('target_temperature', models.FloatField(blank=True, null=True)),
                ('current_humidity', models.FloatField(blank=True, null=True)),
                ('mode', models.CharField(choices=[('heat', 'Heat'), ('cool', 'Cool'), ('auto', 'Auto'), ('off', 'Off')], default='off', max_length=10)),
                ('is_online', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('api_key', models.CharField(blank=True, max_length=255, null=True)),
                ('api_token', models.CharField(blank=True, max_length=255, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thermostats', to='thermostats.property')),
            ],
        ),
        migrations.CreateModel(
            name='UsageStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('energy_usage', models.FloatField(help_text='Energy usage in kWh')),
                ('cost', models.FloatField(help_text='Cost in USD')),
                ('savings', models.FloatField(blank=True, help_text='Estimated savings in USD', null=True)),
                ('average_temperature', models.FloatField(blank=True, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='thermostats.property')),
            ],
            options={
                'verbose_name_plural': 'Usage statistics',
            },
        ),
        migrations.CreateModel(
            name='ThermostatCommand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command_type', models.CharField(choices=[('set_temperature', 'Set Temperature'), ('set_mode', 'Set Mode'), ('set_schedule', 'Set Schedule'), ('other', 'Other')], max_length=20)),
                ('parameters', models.JSONField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('success', 'Success'), ('failed', 'Failed')], default='pending', max_length=10)),
                ('result', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('thermostat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commands', to='thermostats.thermostat')),
            ],
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('event_type', models.CharField(choices=[('booking', 'Booking'), ('maintenance', 'Maintenance'), ('cleaning', 'Cleaning'), ('other', 'Other')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(blank=True, max_length=255, null=True)),
                ('external_calendar_id', models.CharField(blank=True, max_length=255, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to='thermostats.property')),
            ],
        ),
    ]
