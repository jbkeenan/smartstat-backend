"""
Django settings for thermostat_project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-default-key-for-development')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']

# Application definition

# The order of installed apps matters when using a custom user model.  The
# `authentication` app is listed before `django.contrib.auth` and
# `django.contrib.admin` so that Django loads our custom user model first.
INSTALLED_APPS = [
    'authentication',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'thermostats',
    'properties',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'thermostat_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'thermostat_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# -----------------------------------------------------------------------------
# Thermostat integration settings
#
# These values provide defaults for third‑party thermostat APIs (Nest, Pioneer,
# and Cielo/IFTTT).  In development we fall back to empty strings so that the
# adapter factory returns a GenericThermostatAdapter when credentials are not
# provided.  They can be overridden via environment variables in production.

# Google Nest Smart Device Management API keys
NEST_API_KEY: str = os.environ.get('NEST_API_KEY', '')
NEST_API_TOKEN: str = os.environ.get('NEST_API_TOKEN', '')

# Pioneer thermostat API credentials
PIONEER_API_KEY: str = os.environ.get('PIONEER_API_KEY', '')
PIONEER_API_TOKEN: str = os.environ.get('PIONEER_API_TOKEN', '')

# IFTTT Webhook key for Cielo integration
IFTTT_WEBHOOK_KEY: str = os.environ.get('IFTTT_WEBHOOK_KEY', '')

# Default scheduling and temperature values for automation rules.  These values
# can be customized via environment variables or per‑property overrides.
PRE_ARRIVAL_HOURS: int = int(os.environ.get('PRE_ARRIVAL_HOURS', 2))
POST_CHECKOUT_HOURS: int = int(os.environ.get('POST_CHECKOUT_HOURS', 2))

DEFAULT_COOL_TEMP: float = float(os.environ.get('DEFAULT_COOL_TEMP', 72))
DEFAULT_HEAT_TEMP: float = float(os.environ.get('DEFAULT_HEAT_TEMP', 68))
DEFAULT_ECO_COOL_TEMP: float = float(os.environ.get('DEFAULT_ECO_COOL_TEMP', 78))
DEFAULT_ECO_HEAT_TEMP: float = float(os.environ.get('DEFAULT_ECO_HEAT_TEMP', 62))

# Default property time zone (used when a property does not specify its own)
DEFAULT_PROPERTY_TIME_ZONE: str = os.environ.get('DEFAULT_PROPERTY_TIME_ZONE', 'America/Chicago')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
